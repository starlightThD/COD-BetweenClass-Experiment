`timescale 1ns / 1ps

module snake(clk,rstn,sw_i,disp_seg_o,disp_an_o);
    input clk;
    input rstn;
    inout [15:0] sw_i;
    output [7:0] disp_an_o,disp_seg_o;  // 8-bit output to display 7-segment display
    reg[31:0]clkdiv;
    wire clk_CPU;

    always@(posedge clk or negedge rstn) begin
        if(!rstn) clkdiv <= 0;
        else clkdiv <= clkdiv+ 1'b1;
    end

    assign clk_CPU = (sw_i[15]) ? clkdiv[27] : clkdiv[23];

    reg[63:0] display_data;
    reg [5:0]led_data_addr;
    reg[63:0]led_disp_data;
    parameter LED_DATA_NUM = 47;

    reg [63:0]LED_DATA[47:0];// register array to store LED data
    initial begin
        LED_DATA[0] = 64'b11111111_11111111_11111111_11111110_11111110_11111110_11111110_11111110;
        LED_DATA[1] = 64'b11111111_11111110_11111110_11111110_11111110_11111111_11111111_11111111;
        LED_DATA[2] = 64'b11011110_11111110_11111110_11111110_11111111_11111111_11111111_11111111;
        LED_DATA[3] = 64'b11001110_11111110_11111110_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[4] = 64'b11000010_11111111_11111111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[5] = 64'b11000001_11111110_11111111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[6] = 64'b11110001_11111100_11111111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[7] = 64'b11111101_11111000_11110111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[8] = 64'b11111111_11111000_11110011_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[9] = 64'b11111111_11111011_11110001_11111110_11111111_11111111_11111111_11111111;
        LED_DATA[10] = 64'b11111111_11111111_11111001_11111000_11111111_11111111_11111111_11111111;
        LED_DATA[11] = 64'b11111111_11111111_11111101_11111000_11110111_11111111_11111111_11111111;
        LED_DATA[12] = 64'b11111111_11111111_11111111_11111111_11111001_11110001_11111111_11111111;
        LED_DATA[13] = 64'b11111111_11111111_11111111_11111111_11110001_11111100_11111111_11111111;
        LED_DATA[14] = 64'b11111111_11111111_11111111_11111111_11111001_11111000_11111111_11111111;
        LED_DATA[15] = 64'b11111111_11111111_11111111_11111111_11111111_11111000_11110011_11111111;
        LED_DATA[16] = 64'b11111111_11111111_11111111_11111111_11111111_11111011_11110001_11111110;
        LED_DATA[17] = 64'b11111111_11111111_11111111_11111111_11111111_11111111_11111001_10111100;
        LED_DATA[18] = 64'b11111111_11111111_11111111_11111111_11111111_11111111_10111101_10111100;
        LED_DATA[19] = 64'b11111111_11111111_11111111_11111111_10111111_10111111_10111111_10111101;
        LED_DATA[20] = 64'b11111111_11111111_10111111_10111111_10111111_10111111_10111111_11111111;
        LED_DATA[21] = 64'b11111111_10111111_10111111_10111111_10111111_10111111_11111111_11111111;
        LED_DATA[22] = 64'b10101111_10111111_10111111_10111111_11111111_11111111_11111111_11111111;
        LED_DATA[23] = 64'b00100111_00110111_11111111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[24] = 64'b00100111_01110111_01110111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[25] = 64'b01110111_01110111_01110111_01110111_01110111_11111111_11111111_11111111;
        LED_DATA[26] = 64'b11111111_11111111_01110111_01110111_01110111_01110111_01110111_11111111;
        LED_DATA[27] = 64'b11111111_11111111_11111111_01110111_01110111_01110111_01110111_01110111;
        LED_DATA[28] = 64'b11111111_11111111_11111111_11111111_11111111_01110111_01110111_01110001;
        LED_DATA[29] = 64'b11111111_11111111_11111111_11111111_11111111_11111111_01110111_01010000;
        LED_DATA[30] = 64'b11111111_11111111_11111111_11111111_11111111_11111111_11111111_11001000; 
        LED_DATA[31] = 64'b11111111_11111111_11111111_11111111_11111111_11111111_11100111_11001110;
        LED_DATA[32] = 64'b11111111_11111111_11111111_11111111_11111111_11111111_11000111_11001111;
        LED_DATA[33] = 64'b11111111_11111111_11111111_11111111_11111111_11011110_11000111_11111111;
        LED_DATA[34] = 64'b11111111_11111111_11111111_11111111_11110111_11001110_11011111_11111111;
        LED_DATA[35] = 64'b11111111_11111111_11111111_11111111_11000111_11001111_11111111_11111111;
        LED_DATA[36] = 64'b11111111_11111111_11111111_11111110_11000111_11101111_11111111_11111111;
        LED_DATA[37] = 64'b11111111_11111111_11111111_11001110_11001111_11111111_11111111_11111111;
        LED_DATA[38] = 64'b11111111_11111111_11100111_11001110_11111111_11111111_11111111_11111111;
        LED_DATA[39] = 64'b11111111_11111111_11000111_11001111_11111111_11111111_11111111_11111111;
        LED_DATA[40] = 64'b11111111_11011110_11000111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[41] = 64'b11110111_11001110_11011111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[42] = 64'b10100111_11001111_11111111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[43] = 64'b10100111_10101111_11111111_11111111_11111111_11111111_11111111_11111111;
        LED_DATA[44] = 64'b10101111_10111111_10111111_10111111_11111111_11111111_11111111_11111111;
        LED_DATA[45] = 64'b10111111_10111111_10111111_10111111_10111111_11111111_11111111_11111111;
        LED_DATA[46] = 64'b11111111_11111111_10111111_10111111_10111111_10111111_10111111_11111111;
        LED_DATA[47] = 64'b11111111_11111111_11111111_11111111_10111111_10111111_10111111_10111101;
    end
    always@(posedge clk_CPU or negedge rstn) begin
        if(!rstn) begin
            led_data_addr = 6'd0;
            led_disp_data = 64'b1;
        end
        else if(sw_i[0] == 1'b1)begin
            if(led_data_addr == LED_DATA_NUM)begin
                led_data_addr = 6'd0;
                led_disp_data = 64'b1;
            end
            led_disp_data = LED_DATA[led_data_addr];
            led_data_addr = led_data_addr + 1'b1;
        end
        else led_data_addr = led_data_addr;
        end
wire [31:0] instr;
reg[31:0] reg_data;
reg[31:0] alu_disp_data;
reg[31:0] dmemdata;

        always@(sw_i) begin
            if(sw_i[0] == 0)begin
                case (sw_i[14:11])
                    4'b1000: display_data = instr;
                    4'b0100: display_data = reg_data;
                    4'b0010: display_data = alu_disp_data;
                    4'b0001: display_data = dmemdata;
                    default: display_data = instr;
                endcase
            end
            else begin
                display_data = led_disp_data;
            end
        end

        seg7x16 u_seg7x16(
            .clk(clk),
            .rstn(rstn),
            .i_data(display_data),
            .disp_mode(sw_i[0]),
            .o_seg(disp_seg_o),
            .o_sel(disp_an_o)
        );
endmodule
